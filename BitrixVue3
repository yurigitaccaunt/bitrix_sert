BitrixVue 3

В рамках Vue 3 для централизованного хранения данных можно использовать: 
	Vuex
	Pinia
	+ Pinia и Vuex

BitrixVue 3 — это: 
	расширение оригинального Vue 3, где весь функционал реализован с изменением оригинального кода
	+ расширение оригинального Vue 3, где весь функционал реализован без изменения оригинального кода
	полная замена оригинального Vue 3

В рамках приложений BitrixVue 3 можно работать со следующими уровнями событийной модели: 
	+ события на уровне сайта (используется для передачи событий между двумя разным Vue-приложениями в рамках одной страницы или для взаимодействия с другими интерфейсами BitrixFramework)
	+ события на уровне компонентов (используется для взаимодействия между компонентом и его родителем)
	события на уровне приложения (используется для передачи событий между двумя разным Vue-приложениями в рамках одной страницы)
	+ события на уровне приложения (используется, когда нужно пробросить событие на несколько уровней выше или на том же уровне, что и текущий компонент)
	события на уровне компонентов (используется, когда нужно пробросить событие на том же уровне, что и текущий компонент)

Выберите верные утверждения о компонентах в Vue 3: 
	+ компоненты можно использовать неограниченное количество раз
	+ компонент в Vue 3 — это автономное приложение, выполняющее единственную задачу
	мутабельные компоненты можно использовать только один раз
	+ компоненты Vue 3 — это переиспользуемые экземпляры Vue

Если компонент работает как внешний виджет (онлайн-формы, виджет онлайн-чата), то чтобы Vue-приложение имело доступ к языковым фразам, нужно использовать метод: 
	$Bitrix.Loc.getMessages
	+ $Bitrix.Loc.setMessage
	$Bitrix.Loc.setMessages
	$Bitrix.Loc.getMessage
	BitrixVue.getFilteredPhrases

Выберите верные утверждения об именовании компонентов:
	+ если компонент использует Vue как шаблонизатор, а вся основная логика располагается в js-экстеншне, то Vue-компонент располагается в папке src/components
	+ рекомендуется располагать vue-компоненты в папке components на первом уровне js-экстеншнов модуля, например, /modules/timeman/install/js/timeman/components/
	если в названии компонента есть тире – под него обязательно нужно создать отдельную папку

Зарегистрировать мутацию компонента можно: 
	после регистрации оригинального компонента, но применена она будет только после объявления мутабельного компонента
	до и после регистрации оригинального компонента, и мутация будет применена сразу
	+ до и после регистрации оригинального компонента, но применена она будет только после объявления мутабельного компонента
	до регистрации оригинального компонента, но применена она будет только после объявления мутабельного компонента

Выберите верные утверждения о клонировании компонентов: 
	+ при клонировании компонента по имени оригинальный компонент должен быть загружен до момента вставки клона в шаблон компонента
	+ в BitrixVue 3 клонирование компонента всегда осуществляется с оригинала
	клонировать можно только классический Vue компонент
	в BitrixVue 3 клонирование компонента осуществляется с финальной версии компонента (оригинал + мутации)
	+ метод BitrixVue.cloneComponent позволяет клонировать локальный компонент и проводить мутацию (кастомизацию) без изменения оригинального компонента
	+ клонировать можно любой компонент, будь то BitrixVue компонент или классический Vue компонент

Выберите верные утверждения о работе с Vuex: 
	Vuex является рекомендованным хранилищем для Vue 3
	+ для начала работы необходимо подключить расширение ui.vue3.vuex
	+ для работы в рамках страницы и в скриптах без транспиляции нужно использовать неймспейс BX.Vue3.Vuex для доступа к функциям
	+ можно работать с несколькими хранилищами в одном приложении, используя модульную систему

Vue базируется на идее виртуального DOM. При этом: 
	+ сравнивается реальное дерево DOM и его виртуальная копия, выявляется разница и переписывается только то, что претерпело изменения
	+ первоначальная работа ведется с виртуальной копией (virtual DOM), а уже потом изменения применяются к реальным узлам интерфейса
	сравнивается реальное дерево DOM и его виртуальная копия, после чего переписывается вся информация

$Bitrix.Application — это класс, который позволяет: 
	пробросить ссылку на приложение (контекст выполнения)
	+	пробросить ссылку на приложение (контекст выполнения) и при необходимости выполнять методы приложения (контроллера) из компонента 	  любого уровня вложенности
	при необходимости выполнять методы приложения (контроллера) из компонента любого уровня вложенности

Глобальную переменную $Bitrix можно вызывать: 
	в компоненте
	+ и в шаблоне, и в компоненте
	в шаблоне

Для создания Vue-приложения необходимо: 
	импортировать BitrixVue из ui.vue3
	инициализировать Vue-приложение методом BitrixVue.createApp
	+ импортировать BitrixVue из ui.vue3 и инициализировать Vue-приложение методом BitrixVue.createApp

Выберите верные утверждения о мутации компонентов: 
	+ в мутации нужно указать только те параметры, которые требуется изменить или добавить (остальные параметры останутся без изменений)
	+ мутации подвержен любой стандартный параметр объекта definition, который был использован в момент регистрации компонента или добавлен позже другой мутацией
	в BitrixVue 3 мутация компонентов распространяется на клоны оригинального компонента
	+ зарегистрировать мутацию можно до и после регистрации мутабельного компонента

Механика работы отложенных компонентов (расположите пункты по порядку): 
	a) как только потребуется показать компонент, Vue запросит загрузку отложенного компонента
	b) Runtime.loadExtension загружает экстеншн (один или несколько), после чего функция по указанной в componentExportName переменной находит компонент и возвращает его во Vue-шаблон
	c) в параметр components необходимо передать Vue-компонент, описанный в формате Bitrix JS extension, и указать этот компонент в нужном месте в шаблоне
		c-a-b

В рамках BitrixVue 3 поддерживаются следующие виды локальных компонентов:
	+ классические компоненты Vue на основе простых объектов без специальной обработки
	мутабельные компоненты BitrixVue, которые можно кастомизировать посредством модификации исходного кода продукта
	+ мутабельные компоненты BitrixVue, которые можно кастомизировать без модификации исходного кода продукта

Выберите верные утверждения о работе с Pinia:
	+ можно работать с несколькими хранилищами в одном приложении, но при объявлении хранилищ необходимо очень внимательно подходить к 		именованию в функции defineStore – первый параметр должен быть уникальным
	+ для работы в рамках страницы и в скриптах без транспиляции нужно использовать неймспейс BX.Vue3.Pinia для доступа к функциям
	+ Pinia является рекомендованным хранилищем для Vue 3
	+ для начала работы необходимо подключить расширение ui.vue3.pinia
